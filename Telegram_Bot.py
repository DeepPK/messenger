import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import requests

TOKEN = "7537054107:AAHwkBopAiYR0fleIogFq57wC2_Se5CxX5s"
BACKEND_URL = "http://backend:8080/messages"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)


async def send_api_error(update: Update, error_msg: str):
    await update.message.reply_text(f"üö® –û—à–∏–±–∫–∞: {error_msg}")


def format_message(message: dict) -> str:
    return (
        f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ #{message.get('id', 'N/A')}\n"
        f"üë§ –û—Ç: {message.get('sender', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üë• –ö–æ–º—É: {message.get('recipient', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üìÖ –î–∞—Ç–∞: {message.get('timestamp', 'N/A')}\n"
        f"üìù –¢–µ–∫—Å—Ç: {message.get('content', '')}\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    )


# ================== –ö–û–ú–ê–ù–î–´ ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/send <sender> <recipient> <—Ç–µ–∫—Å—Ç> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/my_messages <recipient> - –ú–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "/get_message <id> - –ù–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID\n"
        "/delete_message <id> - –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/all_messages - –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "/search <–∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ> - –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"
    )
    await update.message.reply_text(help_text)


async def send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        args = context.args
        if len(args) < 3:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /send <–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å> <–ø–æ–ª—É—á–∞—Ç–µ–ª—å> <—Ç–µ–∫—Å—Ç>")
            return

        sender, recipient, *content = args
        content = ' '.join(content)

        response = requests.post(
            f"{BACKEND_URL}/send",
            params={
                "sender": sender,
                "recipient": recipient,
                "content": content
            }
        )

        if response.status_code == 200:
            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else:
            await send_api_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

    except Exception as e:
        logging.error(f"Send error: {e}")
        await send_api_error(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")


async def get_user_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        recipient = context.args[0]
        response = requests.get(f"{BACKEND_URL}/{recipient}")

        if response.status_code == 200:
            messages = response.json()
            if not messages:
                await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
                return

            formatted = "\n".join([format_message(m) for m in messages])
            await update.message.reply_text(f"üì¨ –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{formatted}")
        else:
            await send_api_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")

    except IndexError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: /my_messages <recipient>")
    except Exception as e:
        logging.error(f"Get user messages error: {e}")
        await send_api_error(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")


async def get_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        message_id = context.args[0]
        response = requests.get(f"{BACKEND_URL}/message/{message_id}")

        if response.status_code == 200:
            message = response.json()
            await update.message.reply_text(format_message(message))
        else:
            await send_api_error(update, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    except IndexError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è: /get_message <id>")
    except Exception as e:
        logging.error(f"Get message error: {e}")
        await send_api_error(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")


async def delete_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        message_id = context.args[0]
        response = requests.delete(f"{BACKEND_URL}/{message_id}")

        if response.status_code == 200:
            await update.message.reply_text(f"‚úÖ {response.text}")
        else:
            await send_api_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")

    except IndexError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è: /delete_message <id>")
    except Exception as e:
        logging.error(f"Delete error: {e}")
        await send_api_error(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")


async def get_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get(f"{BACKEND_URL}/all")

        if response.status_code == 200:
            messages = response.json()
            formatted = "\n".join([format_message(m) for m in messages])
            await update.message.reply_text(f"üìÇ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{formatted}")
        else:
            await send_api_error(update, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")

    except Exception as e:
        logging.error(f"Get all error: {e}")
        await send_api_error(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")


async def search_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        keyword = ' '.join(context.args)
        if not keyword:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: /search <—Å–ª–æ–≤–æ>")
            return

        response = requests.get(f"{BACKEND_URL}/search", params={"keyword": keyword})

        if response.status_code == 200:
            messages = response.json()
            if not messages:
                await update.message.reply_text("üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            formatted = "\n".join([format_message(m) for m in messages])
            await update.message.reply_text(f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n{formatted}")
        else:
            await send_api_error(update, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")

    except Exception as e:
        logging.error(f"Search error: {e}")
        await send_api_error(update, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")


def main():
    application = Application.builder().token(TOKEN).build()

    handlers = [
        CommandHandler("start", start),
        CommandHandler("send", send_message),
        CommandHandler("my_messages", get_user_messages),
        CommandHandler("get_message", get_message),
        CommandHandler("delete_message", delete_message),
        CommandHandler("all_messages", get_all_messages),
        CommandHandler("search", search_messages)
    ]

    application.add_handlers(handlers)
    application.run_polling()

if __name__ == "__main__":
    main()