stages:
  #- build
  # - test
  # - sonar-check
  - deploy

variables:
  PROJECT_ROOT: "${CI_PROJECT_DIR}"
  FRONTEND_DIR: "${PROJECT_ROOT}/messenger-frontend"
  BACKEND_DIR: "${PROJECT_ROOT}"
  REPORTS_DIR: "${PROJECT_ROOT}/messenger-frontend/ci-reports"
  
  # Maven settings
  MAVEN_OPTS: "-Dmaven.repo.local=${PROJECT_ROOT}/.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  
  # Node settings
  NODE_VERSION: "18"
  NPM_CI_OPTS: "--no-audit --prefer-offline"
  
  # SonarQube
  SONAR_PROJECT_KEY: "DeepPK_messenger_f896f465-8052-4d8a-bb95-1979ae24fdb5"
  SONAR_USER_HOME: "${PROJECT_ROOT}/.sonar"
  GIT_DEPTH: "0"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .m2/repository
    - target/classes/
    - messenger-frontend/node_modules
    - target/site/jacoco/

# ------------------------- BACKEND -------------------------
# backend-build:
#   image: maven:3.8.6-openjdk-18
#   stage: build
#   tags:
#     - messenger
#   script:
#     - cd "${BACKEND_DIR}"
#     - mvn ${MAVEN_CLI_OPTS} clean package -DskipTests
#   artifacts:
#     paths:
#       - target/classes/
#       - target/*.jar
#     expire_in: 1 day

# backend-test:
#   image: maven:3.8.6-openjdk-18
#   stage: test
#   tags:
#     - messenger
#   script:
#     - cd "${BACKEND_DIR}"
#     - mvn ${MAVEN_CLI_OPTS} clean verify
#     - ls -la target/site/jacoco/
#     - ls -la target/classes/
#     - mvn surefire-report:report
#     - mkdir -p "${REPORTS_DIR}"
#     - cp target/site/jacoco/jacoco.xml "${REPORTS_DIR}/backend-jacoco.xml"
#     - cp target/surefire-reports/TEST-*.xml "${REPORTS_DIR}/"
#   artifacts:
#     paths:
#       - "${REPORTS_DIR}/*.xml"
#       - "target/classes/"
#     reports:
#       junit:
#         - "${REPORTS_DIR}/TEST-*.xml"

# ------------------------- FRONTEND -----------------------
# frontend-build:
#   image: node:${NODE_VERSION}-alpine
#   stage: build
#   tags:
#     - messenger
#   script:
#     - cd "${FRONTEND_DIR}"
#     - npm ci ${NPM_CI_OPTS}
#     - npm run build
#   artifacts:
#     paths:
#       - messenger-frontend/node_modules/
#       - messenger-frontend/build/
#     expire_in: 1 day

# frontend-test:
#   image: node:${NODE_VERSION}-alpine
#   stage: test
#   tags:
#     - messenger
#   variables:
#     CI: "true"
#   before_script:
#     - apk add --no-cache libxslt
#   script:
#     - cd "${FRONTEND_DIR}"
#     - npm ci ${NPM_CI_OPTS}
#     - npm install jest-junit --save-dev
#     - mkdir -p "${REPORTS_DIR}"
#     - npm test -- \
#       --coverage \
#       --watchAll=false \
#       --reporters=jest-junit \
#       --testResultsProcessor=jest-junit \
#       --outputFile=ci-reports/raw-report.xml \
#       "src/**/*.test.js"
#     - test -f "${REPORTS_DIR}/raw-report.xml" || exit 1
#     - test -f "sonar-transform.xslt" || exit 1
#     - xsltproc "sonar-transform.xslt" "${REPORTS_DIR}/raw-report.xml" > "${REPORTS_DIR}/frontend-junit.xml"
#     - cp coverage/lcov.info "${REPORTS_DIR}/frontend-lcov.info"
#   artifacts:
#     paths:
#       - "${REPORTS_DIR}/frontend-lcov.info"
#       - "${REPORTS_DIR}/frontend-junit.xml"
#     reports:
#       junit: "${REPORTS_DIR}/frontend-junit.xml"

# ------------------------- SONARQUBE ANALYSIS -------------------------
# sonar-check:
#   stage: sonar-check
#   tags:
#     - messenger
#   image: sonarsource/sonar-scanner-cli:5.0.1
#   variables:
#     SONAR_USER_HOME: "/tmp/.sonar"
#     SONAR_SCANNER_OPTS: "-Xmx512m"
#   script:
#     - apk add --no-cache libxslt
#     - sonar-scanner -X
#       -Dsonar.nodejs.executable=$(which node)
#       -Dsonar.projectKey=$SONAR_PROJECT_KEY
#       -Dsonar.host.url=$SONAR_HOST_URL
#       -Dsonar.login=$SONAR_TOKEN
#       -Dsonar.coverage.exclusions=**/WebConfig.java,**/SecurityConfiguration.java
#       -Dsonar.javascript.exclusions=**/setupProxy.js,**/setupTests.js
#       -Dsonar.sources=src/main/java,messenger-frontend/src
#       -Dsonar.java.binaries=${PROJECT_ROOT}/target/classes
#       -Dsonar.coverage.jacoco.xmlReportPaths=messenger-frontend/ci-reports/backend-jacoco.xml
#       -Dsonar.javascript.lcov.reportPaths=messenger-frontend/ci-reports/frontend-lcov.info
#       -Dsonar.testExecutionReportPaths=**/target/surefire-reports/TEST-*.xml
#       -Dsonar.testExecutionReportPaths=messenger-frontend/ci-reports/frontend-junit.xml
#       -Dsonar.qualitygate.wait=true
#   needs: [ "backend-test", "frontend-test" ]

deploy:
  stage: deploy
  image: docker:24.0
  tags:
    - messenger
  services:
    - name: docker:dind
      alias: docker-host
  variables:
    DOCKER_HOST: tcp://docker-host:2375  # Подключение без TLS
    DOCKER_TLS_CERTDIR: ""
    MINIKUBE_IP: "192.168.49.2"  # Заменить на реальный IP minikube
    KUBECONFIG: "/root/.kube/config"
  before_script:
    - apk add --no-cache curl kubectl  # Установка зависимостей
    - mkdir -p /root/.docker /root/.kube
    - echo "{\"insecure-registries\":[\"${MINIKUBE_IP}:5000\"]}" > /root/.docker/daemon.json
    - echo "$KUBECONFIG_CONTENT" | base64 -d > $KUBECONFIG
    - chmod 600 $KUBECONFIG
    - kubectl config view --raw
    - kubectl config use-context minikube  # Активация контекста

  script:
    - |
      docker info || true
      kubectl cluster-info

      # Сборка образов
      docker build -t ${MINIKUBE_IP}:5000/messenger:1.0 -f Dockerfile.back . || exit 1
      docker build -t ${MINIKUBE_IP}:5000/frontend:1.0 -f messenger-frontend/Dockerfile.front ./messenger-frontend || exit 1
      docker build -t ${MINIKUBE_IP}:5000/telegram-bot:1.0 -f Telegram_bot/Dockerfile.bot ./Telegram_bot || exit 1

      # Публикация образов
      docker push ${MINIKUBE_IP}:5000/messenger:1.0 || exit 1
      docker push ${MINIKUBE_IP}:5000/frontend:1.0 || exit 1
      docker push ${MINIKUBE_IP}:5000/telegram-bot:1.0 || exit 1

      # Применение манифестов
      kubectl apply -f cloud/cloud-terraform/minicube-manifest/ --namespace=messenger || exit 1

      # Ожидание готовности
      sleep 30  # Даем время для инициализации

      # Проверка статуса
      kubectl rollout status deployment/messenger-back --namespace=messenger --timeout=180s
      kubectl rollout status deployment/app --namespace=messenger --timeout=180s
      kubectl rollout status deployment/bot --namespace=messenger --timeout=180s
      
      # Финал проверки
      kubectl get all -n messenger
      kubectl get ingress -n messenger
      echo "Deployment successful!"
  timeout: 20 minutes
  # only:
  #   - main
  #needs: ["sonar-check"]
