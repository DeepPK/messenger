stages:
  - build
  - test
  - sonar-check
  - quality-check

variables:
  PROJECT_ROOT: "${CI_PROJECT_DIR}"
  FRONTEND_DIR: "${PROJECT_ROOT}/messenger-frontend"
  BACKEND_DIR: "${PROJECT_ROOT}"
  REPORTS_DIR: "${PROJECT_ROOT}/ci-reports"
  
  # Maven settings
  MAVEN_OPTS: "-Dmaven.repo.local=${PROJECT_ROOT}/.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  
  # Node settings
  NODE_VERSION: "18"
  NPM_CI_OPTS: "--no-audit --prefer-offline"
  
  # SonarQube
  SONAR_PROJECT_KEY: "DeepPK_messenger_f896f465-8052-4d8a-bb95-1979ae24fdb5"
  SONAR_USER_HOME: "${PROJECT_ROOT}/.sonar"
  GIT_DEPTH: "0"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .m2/repository
    - messenger-frontend/node_modules/

# ------------------------- BACKEND -------------------------
#backend-build:
#  image: maven:3.8.6-openjdk-18
#  stage: build
#  tags:
#    - messenger
#  script:
#    - cd "${BACKEND_DIR}"
#    - mvn ${MAVEN_CLI_OPTS} clean package -DskipTests
#  artifacts:
#    paths:
#      - target/*.jar
#    expire_in: 1 day

backend-test:
  image: maven:3.8.6-openjdk-18
  stage: test
  tags:
    - messenger
  script:
    - cd "${BACKEND_DIR}"
    - mvn ${MAVEN_CLI_OPTS} test
    - mvn test jacoco:report
  artifacts:
    paths:
      - target/site/jacoco/jacoco.xml
    reports:
      junit: target/surefire-reports/*.xml

# ------------------------- FRONTEND -------------------------
#frontend-build:
#  image: node:${NODE_VERSION}-alpine
#  stage: build
#  tags:
#    - messenger
#  script:
#    - cd "${FRONTEND_DIR}"
#    - npm ci ${NPM_CI_OPTS}
#    - npm run build
#  artifacts:
#    paths:
#      - messenger-frontend/build/
#    expire_in: 1 day

frontend-test:
  image: node:${NODE_VERSION}-alpine
  stage: test
  tags:
    - messenger
  variables:
    CI: "true"
  script:
    - cd "${FRONTEND_DIR}"
    - npm ci ${NPM_CI_OPTS}
    - mkdir -p test-report
    - npm test
    - ls -la test-report/
    - ls -la "${REPORTS_DIR}/"
  artifacts:
    reports:
      junit: "${FRONTEND_DIR}/test-report/junit-test-results.xml"
    paths:
      - "${FRONTEND_DIR}/coverage/"
      - "${REPORTS_DIR}/"

# ------------------------- SONARQUBE ANALYSIS -------------------------
sonar-check:
  stage: sonar-check
  tags:
    - messenger
  image: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_SCANNER_OPTS: "-Xmx512m"
  script:
    - echo "Running SonarQube analysis for both projects"
    # Анализ бэкенда
    - sonar-scanner
      -Dsonar.projectKey=$SONAR_PROJECT_KEY
      -Dsonar.projectName=Messenger
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.sources=src/main/java
      -Dsonar.java.binaries=target/classes
      -Dsonar.tests=src/test/java
      -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      -Dsonar.language=java
    # Анализ фронтенда
    - cd frontend
    - sonar-scanner
      -Dsonar.projectKey=$SONAR_PROJECT_KEY
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.sources=src
      -Dsonar.tests=src
      -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
      -Dsonar.testExecutionReportPaths=junit-test-results.xml
      -Dsonar.language=js
  dependencies:
    - backend-test
    - frontend-test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'

# ------------------------- QUALITY GATE CHECK -------------------------
check-metrics:
  image: alpine:latest
  stage: quality-check
  tags:
    - messenger
  script:
    - apk update && apk add curl jq
    - |
      ATTEMPT=0
      MAX_ATTEMPTS=15
      PROJECT_KEY="${SONAR_PROJECT_KEY}"
      
      # Проверка покрытия кода
      while [ ${ATTEMPT} -lt ${MAX_ATTEMPTS} ]; do
        RESPONSE=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/measures/component?component=${PROJECT_KEY}&metricKeys=coverage")
        COVERAGE=$(echo "${RESPONSE}" | jq -r '.component.measures[0].value')
      
        [ "${COVERAGE}" != "null" ] && break
      
        echo "Waiting for coverage data... (attempt $((ATTEMPT+1)))"
        sleep 15
        ATTEMPT=$((ATTEMPT+1))
      done

      # Проверка критических уязвимостей
      CRITICAL_ISSUES=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/search?componentKeys=${PROJECT_KEY}&severities=CRITICAL" | jq -r '.total')
      
      # Проверка условий
      if [ "${COVERAGE}" = "null" ]; then
        echo "ERROR: Failed to get coverage after ${MAX_ATTEMPTS} attempts"
        exit 1
      fi

      if [ $(echo "${COVERAGE} < 80" | bc) -eq 1 ]; then
        echo "Code coverage ${COVERAGE}% < 80%"
        exit 1
      fi

      if [ "${CRITICAL_ISSUES}" -gt 0 ]; then
        echo "Found ${CRITICAL_ISSUES} critical issues"
        exit 1
      fi
