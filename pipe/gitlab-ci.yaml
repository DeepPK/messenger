stages:
  #- build
  - test
  - sonar-check

variables:
  PROJECT_ROOT: "${CI_PROJECT_DIR}"
  FRONTEND_DIR: "${PROJECT_ROOT}/messenger-frontend"
  BACKEND_DIR: "${PROJECT_ROOT}"
  REPORTS_DIR: "${PROJECT_ROOT}/ci-reports"
  
  # Maven settings
  MAVEN_OPTS: "-Dmaven.repo.local=${PROJECT_ROOT}/.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  
  # Node settings
  NODE_VERSION: "18"
  NPM_CI_OPTS: "--no-audit --prefer-offline"
  
  # SonarQube
  SONAR_PROJECT_KEY: "DeepPK_messenger_f896f465-8052-4d8a-bb95-1979ae24fdb5"
  SONAR_USER_HOME: "${PROJECT_ROOT}/.sonar"
  GIT_DEPTH: "0"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .m2/repository
    - target/classes/
    - messenger-frontend/node_modules/
    - target/site/jacoco-aggregate/

# ------------------------- BACKEND -------------------------
# backend-build:
#   image: maven:3.8.6-openjdk-18
#   stage: build
#   tags:
#     - messenger
#   script:
#     - cd "${BACKEND_DIR}"
#     - mvn ${MAVEN_CLI_OPTS} clean package -DskipTests
#   artifacts:
#     paths:
#       - target/classes/
#       - target/*.jar
#     expire_in: 1 day

backend-test:
  image: maven:3.8.6-openjdk-18
  stage: test
  tags:
    - messenger
  script:
    - cd "${BACKEND_DIR}"
    - mvn ${MAVEN_CLI_OPTS} clean test jacoco:report
    - mkdir -p "${REPORTS_DIR}"
    - cp target/site/jacoco-aggregate/jacoco.xml "${REPORTS_DIR}/backend-jacoco.xml"
  artifacts:
    paths:
      - "${REPORTS_DIR}/backend-jacoco.xml"
    reports:
      junit:
        - "**/target/surefire-reports/TEST-*.xml"

# ------------------------- FRONTEND -----------------------
# frontend-build:
#   image: node:${NODE_VERSION}-alpine
#   stage: build
#   tags:
#     - messenger
#   script:
#     - cd "${FRONTEND_DIR}"
#     - npm ci ${NPM_CI_OPTS}
#     - npm run build
#   artifacts:
#     paths:
#       - messenger-frontend/build/
#     expire_in: 1 day

frontend-test:
  image: node:${NODE_VERSION}-alpine
  stage: test
  tags:
    - messenger
  variables:
    CI: "true"
  script:
    - cd "${FRONTEND_DIR}"
    - npm ci ${NPM_CI_OPTS}
    - npm install jest-junit --save-dev
    - mkdir -p "${REPORTS_DIR}"
    - npm test -- --coverage --watchAll=false --testLocationInResults --reporters=jest-junit --testResultsProcessor=jest-junit --outputFile="${REPORTS_DIR}/frontend-junit.xml"
    - cp coverage/lcov.info "${REPORTS_DIR}/frontend-lcov.info"
  artifacts:
    paths:
      - "${REPORTS_DIR}/frontend-lcov.info"
      - "${REPORTS_DIR}/frontend-junit.xml"
    reports:
      junit: "${REPORTS_DIR}/frontend-junit.xml"

# ------------------------- SONARQUBE ANALYSIS -------------------------
sonar-check:
  stage: sonar-check
  tags:
    - messenger
  image: sonarsource/sonar-scanner-cli:5.0.1
  variables:
    SONAR_SCANNER_OPTS: "-Xmx512m"
  script:
    - sonar-scanner
      -Dsonar.projectKey=$SONAR_PROJECT_KEY
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.sources=src/main/java,messenger-frontend/src
      -Dsonar.java.binaries=target/classes
      -Dsonar.coverage.jacoco.xmlReportPaths=ci-reports/backend-jacoco.xml
      -Dsonar.javascript.lcov.reportPaths=ci-reports/frontend-lcov.info
      -Dsonar.qualitygate.wait=true
      -Dsonar.qualitygate.timeout=600

