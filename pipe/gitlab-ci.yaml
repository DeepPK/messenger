stages:
  - build
  - test
  - sonar-check
  - quality-check

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  SONAR_PROJECT_KEY: "DeepPK_messenger_f896f465-8052-4d8a-bb95-1979ae24fdb5"
  MAX_ATTEMPTS: "10"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  NODE_VERSION: "18"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .m2/repository
    - frontend/node_modules/

backend-build:
  image: maven:3.8.6-openjdk-18
  stage: build
  tags:
    - messenger
  script:
    - mvn $MAVEN_CLI_OPTS clean package -DskipTests
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 day

frontend-build:
  image: node:${NODE_VERSION}-alpine
  stage: build
  tags:
    - messenger
  variables:
    CI: "true"
  script:
    - cd messenger-frontend
    - npm ci --no-audit --prefer-offline
    - npm run build
  artifacts:
    paths:
      - messenger-frontend/build/
    expire_in: 1 day

backend-test:
  image: maven:3.8.6-openjdk-18
  stage: test
  tags:
    - messenger
  script:
    - mvn $MAVEN_CLI_OPTS test
    - mvn test jacoco:report
  artifacts:
    paths:
      - target/site/jacoco/jacoco.xml
    reports:
      junit: target/surefire-reports/*.xml

frontend-test:
  image: node:${NODE_VERSION}-alpine
  stage: test
  tags:
    - messenger
  variables:
    CI: "true"
  script:
    - cd messenger-frontend
    - npm ci --no-audit --prefer-offline
    - npm test -- --watchAll=false --coverage --reporters=jest-junit
  artifacts:
    reports:
      junit: messenger-frontend/junit.xml
    paths:
      - messenger-frontend/coverage/

sonar-check:
  image: maven:3-eclipse-temurin-17
  stage: sonar-check
  tags:
    - messenger
  cache:
    policy: pull-push
    key: "sonar-cache-$CI_COMMIT_REF_SLUG"
    paths:
      - "${SONAR_USER_HOME}/cache"
      - sonar-scanner/
  script:
    - mvn sonar:sonar
      -Dsonar.tests=src/test/java/ru/khkhlv
      -Dsonar.projectName=Messenger
      -Dsonar.projectKey=$SONAR_PROJECT_KEY
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      -Dsonar.qualitygate.wait=true
  dependencies:
    - backend-test
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'

check-metrics:
  image: alpine:latest
  stage: quality-check
  tags:
    - messenger
  script:
    - apk update && apk add curl jq
    - sleep 30
    - |
      ATTEMPT=0
      MAX_ATTEMPTS=15  # Увеличено до 15 попыток
      PROJECT_KEY="$SONAR_PROJECT_KEY"
      COVERAGE="null"

      # Ожидаем данные о покрытии
       while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
        RESPONSE=$(curl -s -u "$SONAR_TOKEN": "$SONAR_URL")
        COVERAGE=$(echo "$RESPONSE" | jq -r '.component.measures[0].value')
        
        if [ "$COVERAGE" != "null" ]; then
          echo "Coverage received: $COVERAGE%"
          break
        fi
        
        echo "Waiting for coverage data... (attempt $((ATTEMPT+1))"
        sleep 15
        ATTEMPT=$((ATTEMPT+1))
      done

      if [ "$COVERAGE" = "null" ]; then
        echo "ERROR: Failed to get coverage after $MAX_ATTEMPTS attempts"
        exit 1
      fi

      if [ $(echo "$COVERAGE < 80" | bc) -eq 1 ]; then
        echo "Code coverage $COVERAGE% < 80%"
        exit 1
      fi

      CRITICAL_ISSUES=$(curl -s -u "$SONAR_TOKEN": "$SONAR_HOST_URL/api/issues/search?componentKeys=$PROJECT_KEY&severities=CRITICAL" | jq -r '.total')
      if [ "$CRITICAL_ISSUES" -gt 0 ]; then
        echo "Found $CRITICAL_ISSUES critical issues"
        exit 1
      fi
